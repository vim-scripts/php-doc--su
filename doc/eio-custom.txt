eio_custom -- Execute custom request like any other eio_* call.

  resource eio_custom(mixed execute, int pri, mixed callback [, mixed data])~

|eio_custom| executes custom function specified by {execute} processing it
just like any other eio_* call.

Specifies the request function that should match the following prototype:

  mixed execute(mixed data);

{callback} is event completion callback that should match the following
prototype:

  void callback(mixed data, mixed result);

{data} is the data passed to {execute} via {data} argument without
modifications {result} value returned by {execute}

The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL. If
NULL passed, {pri} internally is set to EIO_PRI_DEFAULT.

{callback} function is called when the request is done. It should match the
following prototype:

  void callback($data, $result);

{$data} is custom data passed to the request. {$result} contains
request-specific result value; basically, the value returned by corresponding
system call.

Arbitrary variable passed to {callback}.

|eio_custom| returns request resource on success or FALSE on error.

|eio_custom| example

<?php >
  /* Callback for the custom callback */
  function my_custom_callback($data, $result) {
      var_dump($data);
      var_dump(count($result));
      var_dump($result['data_modified']);
      var_dump($result['result']);
  }
  
  /* The custom request */
  function my_custom($data) {
      var_dump($data);
  
      $result  = array(
          'result'        => 1001,
          'data_modified' => "my custom data",
      );
  
      return $result;
  }
  
  $data = "my_custom_data";
  $req = eio_custom("my_custom", EIO_PRI_DEFAULT, "my_custom_callback", $data);
  var_dump($req);
  eio_event_loop();
?>

The above example will output something similar to:

  resource(4) of type (EIO Request Descriptor)
  string(14) "my_custom_data"
  string(14) "my_custom_data"
  int(2)
  string(14) "my custom data"
  int(1001)

vim:ft=help:
