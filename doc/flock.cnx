flock -- 轻便的咨询文件锁定

  bool flock(int handle, int operation [, int wouldblock])~

PHP
支持以咨询方式（也就是说所有访问程序必须使用同一方式锁定,
否则它不会工作）锁定全部文件的一种轻便方法。

在 Windows 下 |flock| 将会强制执行。

|flock| 操作的 {handle}
必须是一个已经打开的文件指针。{operation}
可以是以下值之一：

要取得共享锁定（读取的程序），将 {operation} 设为
LOCK_SH（PHP 4.0.1 以前的版本设置为 1）。

要取得独占锁定（写入的程序），将 {operation} 设为
LOCK_EX（PHP 4.0.1 以前的版本中设置为 2）。

要释放锁定（无论共享或独占），将 {operation} 设为
LOCK_UN（PHP 4.0.1 以前的版本中设置为 3）。

如果不希望 |flock| 在锁定时堵塞，则给 {operation} 加上
LOCK_NB（PHP 4.0.1 以前的版本中设置为 4）。

|flock|
允许执行一个简单的可以在任何平台中使用的读取/写入模型（包括大部分的
Unix 派生版和甚至是
Windows）。如果锁定会堵塞的话（EWOULDBLOCK
错误码情况下），可选的第三个参数会被设置为
TRUE。锁定操作也可以被 |fclose|
释放（代码执行完毕时也会自动调用）。

成功时返回 TRUE， 或者在失败时返回 &false;.

|flock| 例子

<?php >
  $fp = fopen("/tmp/lock.txt", "w+");
  
  if (flock($fp, LOCK_EX)) { // 进行排它型锁定
      fwrite($fp, "Write something here\n");
      flock($fp, LOCK_UN); // 释放锁定
  } else {
      echo "Couldn't lock the file !";
  }
  
  fclose($fp);
?>





由于 |flock| 需要一个文件指针，
因此可能不得不用一个特殊的锁定文件来保护打算通过写模式打开的文件的访问（在
|fopen| 函数中加入 "w" 或 "w+"）。

|flock| 不能用于 NFS
以及其它一些网络文件系统。详细资料查看自己操作系统的文档。

在部分操作系统中 |flock|
以进程级实现。当用一个多线程服务器 API（比如
ISAPI）时，可能不可以依靠 |flock|
来保护文件，因为运行于同一服务器实例中其它并行线程的
PHP 脚本可以对该文件进行处理。

|flock| 不支持旧的文件系统，如 FAT
以及它的派生系统。因此，此环境下总是返回
FALSE（尤其是对 Windows 98 用户来说）。

vim:ft=help:
