curl_setopt -- 设置一个cURL传输选项

  bool curl_setopt(resource ch, int option, mixed value)~

为给定的cURL会话句柄设置一个选项。

{ch} 由 |curl_init| 返回的 cURL 句柄。

{option} 需要设置的CURLOPT_XXX选项。

{value} 将设置在{option}选项上的值。

对于下面的这些{option}的可选参数，{value}应该被设置一个bool类型的值：
选项 可选{value}值 备注 CURLOPT_AUTOREFERER
当根据Location:重定向时，自动设置header中的Referer:信息。
CURLOPT_BINARYTRANSFER
在启用CURLOPT_RETURNTRANSFER的时候，返回原生的（Raw）输出。
CURLOPT_COOKIESESSION 启用时curl会仅仅传递一个session
cookie，忽略其他的cookie，默认状况下cURL会将所有的cookie返回给服务端。session
cookie是指那些用来判断服务器端的session是否有效而存在的cookie。
CURLOPT_CRLF 启用时将Unix的换行符转换成回车换行符。
CURLOPT_DNS_USE_GLOBAL_CACHE
启用时会启用一个全局的DNS缓存，此项为线程安全的，并且默认启用。
CURLOPT_FAILONERROR
显示HTTP状态码，默认行为是忽略编号小于等于400的HTTP信息。
CURLOPT_FILETIME
启用时会尝试修改远程文档中的信息。结果信息会通过|curl_getinfo|函数的{CURLINFO_FILETIME}选项返回。
|curl_getinfo|. CURLOPT_FOLLOWLOCATION
启用时会将服务器服务器返回的"Location:
"放在header中递归的返回给服务器，使用CURLOPT_MAXREDIRS可以限定递归返回的数量。
CURLOPT_FORBID_REUSE 在完成交互以后强迫断开连接，不能重用。
CURLOPT_FRESH_CONNECT
强制获取一个新的连接，替代缓存中的连接。
CURLOPT_FTP_USE_EPRT 启用时当FTP下载时，使用EPRT (或
LPRT)命令。设置为FALSE时禁用EPRT和LPRT，使用PORT命令 only.
CURLOPT_FTP_USE_EPSV
启用时，在FTP传输过程中回复到PASV模式前首先尝试EPSV命令。设置为FALSE时禁用EPSV命令。
CURLOPT_FTPAPPEND 启用时追加写入文件而不是覆盖它。
CURLOPT_FTPASCII CURLOPT_TRANSFERTEXT的别名。 CURLOPT_FTPLISTONLY
启用时只列出FTP目录的名字。 CURLOPT_HEADER
启用时会将头文件的信息作为数据流输出。 CURLINFO_HEADER_OUT
启用时追踪句柄的请求字符串。 从 PHP 5.1.3
开始可用。CURLINFO_前缀是故意的(intentional)。 CURLOPT_HTTPGET
启用时会设置HTTP的method为GET，因为GET是默认是，所以只在被修改的情况下使用。
CURLOPT_HTTPPROXYTUNNEL 启用时会通过HTTP代理来传输。 CURLOPT_MUTE
启用时将cURL函数中所有修改过的参数恢复默认值。
CURLOPT_NETRC
在连接建立以后，访问~/.netrc文件获取用户名和密码信息连接远程站点。
CURLOPT_NOBODY 启用时将不对HTML中的BODY部分进行输出。
CURLOPT_NOPROGRESS
启用时关闭curl传输的进度条，此项的默认设置为启用。
PHP自动地设置这个选项为TRUE，这个选项仅仅应当在以调试为目的时被改变。

CURLOPT_NOSIGNAL
启用时忽略所有的curl传递给php进行的信号。在SAPI多线程传输时此项被默认启用。
cURL 7.10时被加入。 CURLOPT_POST
启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。
CURLOPT_PUT
启用时允许HTTP发送文件，必须同时设置CURLOPT_INFILE和CURLOPT_INFILESIZE。
CURLOPT_RETURNTRANSFER
将|curl_exec|获取的信息以文件流的形式返回，而不是直接输出。
CURLOPT_SSL_VERIFYPEER
禁用后cURL将终止从服务端进行验证。使用CURLOPT_CAINFO选项设置证书使用CURLOPT_CAPATH选项设置证书目录
如果CURLOPT_SSL_VERIFYPEER(默认值为2)被启用，CURLOPT_SSL_VERIFYHOST需要被设置成TRUE否则设置为FALSE。
自cURL 7.10开始默认为TRUE。从cURL 7.10开始默认绑定安装。
CURLOPT_TRANSFERTEXT
启用后对FTP传输使用ASCII模式。对于LDAP，它检索纯文本信息而非HTML。在Windows系统上，系统不会把STDOUT设置成binary模式。
CURLOPT_UNRESTRICTED_AUTH
在使用CURLOPT_FOLLOWLOCATION产生的header中的多个locations中持续追加用户名和密码信息，即使域名已发生改变。
CURLOPT_UPLOAD 启用后允许文件上传。 CURLOPT_VERBOSE
启用时会汇报所有的信息，存放在STDERR或指定的CURLOPT_STDERR中。

对于下面的这些{option}的可选参数，{value}应该被设置一个integer类型的值：
选项 可选{value}值 备注 CURLOPT_BUFFERSIZE
每次获取的数据中读入缓存的大小，但是不保证这个值每次都会被填满。
在cURL 7.10中被加入。 CURLOPT_CLOSEPOLICY
不是{CURLCLOSEPOLICY_LEAST_RECENTLY_USED}就是{CURLCLOSEPOLICY_OLDEST}，还存在另外三个CURLCLOSEPOLICY_，但是cURL暂时还不支持。
CURLOPT_CONNECTTIMEOUT
在发起连接前等待的时间，如果设置为0，则无限等待。
CURLOPT_CONNECTTIMEOUT_MS
尝试连接等待的时间，以毫秒为单位。如果设置为0，则无限等待。
在cURL 7.16.2中被加入。从PHP 5.2.3开始可用。
CURLOPT_DNS_CACHE_TIMEOUT
设置在内存中保存DNS信息的时间，默认为120秒。
CURLOPT_FTPSSLAUTH FTP验证方式：CURLFTPAUTH_SSL
(首先尝试SSL)，CURLFTPAUTH_TLS (首先尝试TLS)或CURLFTPAUTH_DEFAULT
(让cURL自动决定)。 在cURL 7.12.2中被加入。 CURLOPT_HTTP_VERSION
{CURL_HTTP_VERSION_NONE}
(默认值，让cURL自己判断使用哪个版本)，{CURL_HTTP_VERSION_1_0}
(强制使用 HTTP/1.0)或{CURL_HTTP_VERSION_1_1} (强制使用 HTTP/1.1)。
CURLOPT_HTTPAUTH
使用的HTTP验证方法，可选的值有：{CURLAUTH_BASIC}、{CURLAUTH_DIGEST}、{CURLAUTH_GSSNEGOTIATE}、{CURLAUTH_NTLM}、{CURLAUTH_ANY}和{CURLAUTH_ANYSAFE}。

可以使用|位域(或)操作符分隔多个值，cURL让服务器选择一个支持最好的值。

{CURLAUTH_ANY}等价于CURLAUTH_BASIC | CURLAUTH_DIGEST |
CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.

{CURLAUTH_ANYSAFE}等价于CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE |
CURLAUTH_NTLM.

CURLOPT_INFILESIZE
设定上传文件的大小限制，字节(byte)为单位。
CURLOPT_LOW_SPEED_LIMIT
当传输速度小于CURLOPT_LOW_SPEED_LIMIT时(bytes/sec)，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。
CURLOPT_LOW_SPEED_TIME
当传输速度小于CURLOPT_LOW_SPEED_LIMIT时(bytes/sec)，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。
CURLOPT_MAXCONNECTS
允许的最大连接数量，超过是会通过CURLOPT_CLOSEPOLICY决定应该停止哪些连接。
CURLOPT_MAXREDIRS
指定最多的HTTP重定向的数量，这个选项是和CURLOPT_FOLLOWLOCATION一起使用的。
CURLOPT_PORT 用来指定连接端口。（可选项） CURLOPT_PROTOCOLS
CURLPROTO_*的位域指。如果被启用，位域值会限定libcurl在传输过程中有哪些可使用的协议。这将允许你在编译libcurl时支持众多协议，但是限制只是用它们中被允许使用的一个子集。默认libcurl将会使用全部它支持的协议。参见CURLOPT_REDIR_PROTOCOLS.

可用的协议选项为：{CURLPROTO_HTTP}、{CURLPROTO_HTTPS}、{CURLPROTO_FTP}、{CURLPROTO_FTPS}、{CURLPROTO_SCP}、{CURLPROTO_SFTP}、{CURLPROTO_TELNET}、{CURLPROTO_LDAP}、{CURLPROTO_LDAPS}、{CURLPROTO_DICT}、{CURLPROTO_FILE}、{CURLPROTO_TFTP}、{CURLPROTO_ALL}

在cURL 7.19.4中被加入。 CURLOPT_PROXYAUTH
HTTP代理连接的验证方式。使用在CURLOPT_HTTPAUTH中的位域标志来设置相应选项。对于代理验证只有{CURLAUTH_BASIC}和{CURLAUTH_NTLM}当前被支持。
在cURL 7.10.7中被加入。 CURLOPT_PROXYPORT
代理服务器的端口。端口也可以在CURLOPT_PROXY中进行设置。
CURLOPT_PROXYTYPE 不是{CURLPROXY_HTTP} (默认值)
就是{CURLPROXY_SOCKS5}。 在cURL 7.10中被加入。
CURLOPT_REDIR_PROTOCOLS
CURLPROTO_*中的位域值。如果被启用，位域值将会限制传输线程在CURLOPT_FOLLOWLOCATION开启时跟随某个重定向时可使用的协议。这将使你对重定向时限制传输线程使用被允许的协议子集默认libcurl将会允许除FILE和SCP之外的全部协议。这个和7.19.4预发布版本种无条件地跟随所有支持的协议有一些不同。关于协议常量，请参照CURLOPT_PROTOCOLS。
在cURL 7.19.4中被加入。 CURLOPT_RESUME_FROM
在恢复传输时传递一个字节偏移量（用来断点续传）。
CURLOPT_SSL_VERIFYHOST 1
检查服务器SSL证书中是否存在一个公用名(common
name)。译者注：公用名(Common
Name)一般来讲就是填写你将要申请SSL证书的域名
(domain)或子域名(sub domain)。2
检查公用名是否存在，并且是否与提供的主机名匹配。
CURLOPT_SSLVERSION 使用的SSL版本(2 或
3)。默认情况下PHP会自己检测这个值，尽管有些情况下需要手动地进行设置。
CURLOPT_TIMECONDITION
如果在CURLOPT_TIMEVALUE指定的某个时间以后被编辑过，则使用{CURL_TIMECOND_IFMODSINCE}返回页面，如果没有被修改过，并且CURLOPT_HEADER为true，则返回一个"304
Not Modified"的header，
CURLOPT_HEADER为false，则使用{CURL_TIMECOND_IFUNMODSINCE}，默认值为{CURL_TIMECOND_IFUNMODSINCE}。
CURLOPT_TIMEOUT 设置cURL允许执行的最长秒数。 CURLOPT_TIMEOUT_MS
设置cURL允许执行的最长毫秒数。 在cURL
7.16.2中被加入。从PHP 5.2.3起可使用。 CURLOPT_TIMEVALUE
设置一个CURLOPT_TIMECONDITION使用的时间戳，在默认状态下使用的是{CURL_TIMECOND_IFMODSINCE}。

对于下面的这些{option}的可选参数，{value}应该被设置一个string类型的值：
选项 可选{value}值 备注 CURLOPT_CAINFO
一个保存着1个或多个用来让服务端验证的证书的文件名。这个参数仅仅在和CURLOPT_SSL_VERIFYPEER一起使用时才有意义。
. CURLOPT_CAPATH
一个保存着多个CA证书的目录。这个选项是和CURLOPT_SSL_VERIFYPEER一起使用的。
CURLOPT_COOKIE 设定HTTP请求中"Cookie:
"部分的内容。多个cookie用分号分隔，分号后带一个空格(例如，
"fruit=apple; colour=red")。 CURLOPT_COOKIEFILE
包含cookie数据的文件名，cookie文件的格式可以是Netscape格式，或者只是纯HTTP头部信息存入文件。
CURLOPT_COOKIEJAR 连接结束后保存cookie信息的文件。
CURLOPT_CUSTOMREQUEST
使用一个自定义的请求信息来代替"GET"或"HEAD"作为HTTP请求。这对于执行"DELETE"
或者其他更隐蔽的HTTP请求。有效值如"GET"，"POST"，"CONNECT"等等。也就是说，不要在这里输入整个HTTP请求。例如输入"GET
/index.html HTTP/1.0\r\n\r\n"是不正确的。
在确定服务器支持这个自定义请求的方法前不要使用。

vim:ft=help:
