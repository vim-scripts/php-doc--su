oci_new_connect -- 建定一个到 Oracle 服务器的新连接

  resource oci_new_connect(string username, string password [, string db [, string charset [, int session_mode]]])~

|oci_new_connect| 创建一个到 Oracle 服务器的新连接并登录。与
|oci_connect| 和 |oci_pconnect| 不同，|oci_new_connect|
不会缓冲连接，总是会返回一个全新的刚打开的连接句柄。这在应用程序需要在两组查询之间实现事务隔离很有用。

可选的第三个参数可以是本地 Oracle 实例的名字或者是在
tnsnames.ora 的条目中的名字。如果没有指定第三个参数， PHP
使用环境变量 ORACLE_SID 和 TWO_TASK 来分别确定本地 Oracle
实例的名字和 tnsnames.ora 的位置。

{session_mode} 参数自版本 1.1
起可用并接受如下值：OCI_DEFAULT，OCI_SYSOPER 和
OCI_SYSDBA。如果指定了 OCI_SYSOPER 或 OCI_SYSDBA
其中之一，|oci_new_connect|
将尝试使用外部认证信息建立特权连接。特权连接默认被禁止。要启用，需要将
oci8.privileged_connect 设为 On。

如果 PHP 用的是 Oracle Instant
Client，可以用容易的命名连接方法，说明见这里：http://download.oracle.com/docs/cd/E11882_01/network.112/e10836/naming.htm。基本上这意味着可以指定
"//db_host[:port]/database_name"
作为数据库名。但如果想用命名的旧方法则必须设定
ORACLE_HOME 或 TNS_ADMIN 二者之一。

使用 Oracle
客户端库来确定字符集。字符集不需要与数据库的字符集相匹配。如果不匹配，Oracle
会尽可能地将数据从数据库字符集进行转换。因为依赖于字符集，可能不能给出可用的结果。转换也增加一些时间开销。

如果不指定，Oracle 客户端用 NLS_LANG
环境变量来决定字符集。

传递此参数可减少连接时间。

下面例子演示了怎样隔离连接。 |oci_new_connect| 例子

<?php >
  echo "<html><pre>";
  $db = "";
  
  $c1 = oci_connect("scott", "tiger", $db);
  $c2 = oci_new_connect("scott", "tiger", $db);
  
  function create_table($conn)
  {
    $stmt = oci_parse($conn, "create table scott.hallo (test
  varchar2(64))");
    oci_execute($stmt);
    echo $conn . " created table\n\n";
  }
  
  function drop_table($conn)
  {
    $stmt = oci_parse($conn, "drop table scott.hallo");
    oci_execute($stmt);
    echo $conn . " dropped table\n\n";
  }
  
  function insert_data($conn)
  {
    $stmt = oci_parse($conn, "insert into scott.hallo
              values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
    oci_execute($stmt, OCI_DEFAULT);
    echo $conn . " inserted hallo\n\n";
  }
  
  function delete_data($conn)
  {
    $stmt = oci_parse($conn, "delete from scott.hallo");
    oci_execute($stmt, OCI_DEFAULT);
    echo $conn . " deleted hallo\n\n";
  }
  
  function commit($conn)
  {
    oci_commit($conn);
    echo $conn . " committed\n\n";
  }
  
  function rollback($conn)
  {
    oci_rollback($conn);
    echo $conn . " rollback\n\n";
  }
  
  function select_data($conn)
  {
    $stmt = oci_parse($conn, "select * from scott.hallo");
    oci_execute($stmt, OCI_DEFAULT);
    echo $conn . "----selecting\n\n";
    while (oci_fetch($stmt)) {
      echo $conn . " <" . oci_result($stmt, "TEST") . ">\n\n";
    }
    echo $conn . "----done\n\n";
  }
  
  create_table($c1);
  insert_data($c1);
  
  select_data($c1);
  select_data($c2);
  
  rollback($c1);
  
  select_data($c1);
  select_data($c2);
  
  insert_data($c2);
  commit($c2);
  
  select_data($c1);
  
  delete_data($c1);
  select_data($c1);
  select_data($c2);
  commit($c1);
  
  select_data($c1);
  select_data($c2);
  
  drop_table($c1);
  echo "</pre></html>";
?>





|oci_new_connect| 在出错时返回 FALSE。

在 PHP 5.0.0 之前的版本必须使用 |ocinlogon|
替代本函数。该函数名仍然可用，为向下兼容作为
|oci_new_connect| 的别名。不过其已被废弃，不推荐使用。

参见 |oci_connect| 和 |oci_pconnect|。

vim:ft=help:
